package be.axa

import be.axa.build.maven.Maven
import be.axa.config.AxaProperties
import be.axa.deploy.IDeploymentStrategy
import be.axa.deploy.strategy.impl.DeploymentPlanStrategyMatrix
import be.axa.model.VersionType
import be.axa.model.configurationitem.ArtefactType
import be.axa.model.configurationitem.DeploymentPlatform
import be.axa.model.configurationitem.DeploymentTarget
import be.axa.model.configurationitem.JavaDevelopmentKit
import be.axa.model.configurationitem.strategy.IConfigurationItemTypeStrategy
import be.axa.model.environment.impl.EnvironmentNone
import be.axa.model.factory.IConfigurationItemTypeFactory
import be.axa.model.factory.impl.ConfigurationItemTypeFactoryMatrix
import be.axa.model.scm.ISCMStrategy
import be.axa.model.scm.SCM
import be.axa.model.scm.impl.GitSCMStrategy
import be.axa.store.IStorageStrategy
import be.axa.store.artifactory.IBinariesRepository
import be.axa.store.artifactory.factory.BinaryRepositoryMatrix
import be.axa.store.factory.impl.StoreStrategyMatrix
import be.axa.validators.SolutionValidator
import be.axa.model.environment.Environment
import be.axa.model.EnviromentTarget

/**
 * Created by DTDJ857 on 11/08/2017.
 * Modified bt DSND714 on 11/09/2019
 */
class Jenkins implements Serializable {

    def JAVA_NODE_LABEL = ''
    def pipeline

    Jenkins(pipeline) {
        this.pipeline = pipeline
    }

    def cicd() {

        // Set the required properties of the job generated by the multibranch pipeline job
        pipeline.steps.properties([
                [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactNumToKeepStr: '3', numToKeepStr: '3']],
                [$class: 'RebuildSettings', autoRebuild: false],
        ])

        // Get Java node label from environment variables
        JAVA_NODE_LABEL = pipeline.env.JAVA_NODE_LABEL
        if(!JAVA_NODE_LABEL)
            pipeline.steps.error("JAVA_NODE_LABEL is not found in environment variables")

        // Print env properties
        pipeline.steps.node(JAVA_NODE_LABEL) {
            pipeline.steps.echo("JENKINS JAVA HOME : " + pipeline.env.JAVA_HOME)
        }

        // AXA CI,CD configuration
        def axaProperties = new AxaProperties(pipeline.steps)
        def properties = [:]

        // DVCS Git
        ISCMStrategy scmStrategy = new GitSCMStrategy(pipeline.steps)
        SCM scmDTO;
        //TODO: Tarik: does that need to be directly part of the SCM model ? (set with scmStrategy)
        VersionType versionType;
  

        // Maven Build Tool API
        Maven maven
        def pom

        // Artifactory Server Client
        IBinariesRepository artifactory
        
        // Strategies
        IConfigurationItemTypeStrategy configurationItemType

        //target env
        EnviromentTarget envTarget

        try {
            // Pipeline
            pipeline.steps.node(JAVA_NODE_LABEL) {
                pipeline.steps.stage('SCM') {
                    // Clean workspace
                    pipeline.cleanWs()

                    // Check out the code from Git, scm is a global environment pipeline variable
                    def scmProperties = pipeline.steps.checkout pipeline.scm
                    def credentials = pipeline.getCredentialsFromId(pipeline.scm.getUserRemoteConfigs()[0].getCredentialsId())
                    scmProperties.put("GIT_CREDENTIALS",credentials)

                    scmDTO = scmStrategy.getSCM(scmProperties, pipeline.currentBuild.changeSets)
                    if (!scmStrategy.accept(scmDTO.getBranchName())) {
                        pipeline.steps.echo("Please consult AXA JAVA Branching Stategy :\n ${GitSCMStrategy.GIT_BRANCHING_GUIDELINE_HYPERLINK}")
                        pipeline.steps.error("Your branch ${scmDTO.getBranchName()} is not supported.")
                    }
                    versionType = scmStrategy.getVersionType(scmDTO)
                   
                }
            }

            pipeline.steps.node(JAVA_NODE_LABEL) {
                pipeline.steps.stage('Pre-Build') {

                    //Retrieve all project build properties
                    properties = axaProperties.load(versionType)
                    pipeline.steps.echo("Axa properties :" + properties.toString())

                    // Load Maven pom.xml
                    pom = pipeline.steps.readMavenPom file: 'pom.xml'
                    pipeline.steps.echo('pom.version : ' + pom.version)
                    String javaVersion = pom.properties.getProperty("java.version", "1.7")
                    JavaDevelopmentKit jdk = JavaDevelopmentKit.fromJavaVersion(javaVersion)
                    pipeline.steps.echo("pom.properties.java.version : ${jdk.version} with Jenkins tool location ID ${jdk.jenkinsToolLocationID}")

                    // init tools
                    maven = new Maven(pipeline, jdk.jenkinsToolLocationID, Maven.MVN_JENKINS_TOOL_ID, pom)

                    // Create the CI TYPE
                    IConfigurationItemTypeFactory cmdb = new ConfigurationItemTypeFactoryMatrix()
                    configurationItemType = cmdb.createConfigurationItemType(
                            properties[AxaProperties.ARTEFACT_TYPE] as ArtefactType,
                            properties[AxaProperties.DEPLOYMENT_TARGET] as DeploymentTarget,
                            properties[AxaProperties.DEPLOYMENT_PLATFORM] as DeploymentPlatform
                    )

                    if (!(configurationItemType)) {
                        pipeline.steps.error("Flow is unavailable. Check axa.properties values.")
                    }
                    //create type of deployment env
                    envTarget= properties[AxaProperties.CONTINOUS_INTEGRATION_ON] as EnviromentTarget

                    artifactory = new BinaryRepositoryMatrix(maven).select(configurationItemType);

                    def validator = new SolutionValidator(pipeline, configurationItemType, versionType, envTarget)                    
                    validator.checkJavaVersionSupported(jdk)
                    validator.checkVersionCompliant(maven)
                    validator.checkDeploymentPlatformSupported()
                    validator.checkWriteAccess(artifactory)
                    validator.checkRuntimePropertiesArePresent()

                    // Update current job build execution name and description for visibility purpose inside build history
                    pipeline.currentBuild.displayName = "#${pipeline.currentBuild.number}/${pom.artifactId}"
                    pipeline.currentBuild.description = "${pipeline.env.BRANCH_NAME}/${pom.version}"
                }
            }

            pipeline.steps.node(JAVA_NODE_LABEL) {
                pipeline.steps.stage('Build') {
                     
                    // Build the app with maven with all required goals,plugins,profiles,options
                    maven.install(properties.secureTokenFileName)

                    // Report unit testing result
                    pipeline.steps.junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                    pipeline.steps.publishHTML(target: [
                            allowMissing         : true,
                            alwaysLinkToLastBuild: false,
                            keepAll              : true,
                            reportDir            : 'coverage',
                            reportFiles          : 'index.html',
                            reportName           : "Junit Report"]
                    )
                }
            }

            pipeline.steps.node(JAVA_NODE_LABEL) {
                pipeline.steps.stage('QA') {
                    // Launch Sonarqube analysis with Maven for any Git Branches (requested by Java expert team)
                    maven.sonarQube()
                }
            }

            if(versionType.requiresDeployment(envTarget)){
                pipeline.steps.node(JAVA_NODE_LABEL) {
                    pipeline.steps.stage('Store') {
                        IStorageStrategy storageStrategy = new StoreStrategyMatrix(envTarget).selectStoreStrategy(versionType)                             
                        if (storageStrategy) {                                
                            storageStrategy.store(artifactory, configurationItemType.getArtefactPath(maven.pom), properties[AxaProperties.STATIC_FILE_NAME])                                
                        } else {
                            pipeline.steps.echo("No storage strategy define for this CI type and SCM branch")
                        }                        
                    }
                }

                if(scmStrategy.isReleaseBranch(scmDTO.branchName)){
                    pipeline.steps.node(JAVA_NODE_LABEL) {
                        pipeline.steps.stage('Tag') {
                            scmStrategy.addTag(pom.version)
                            scmStrategy.pushTag(scmDTO, pom.version)
                        }
                    }
                }

                pipeline.steps.stage('Deploy') {
                    pipeline.steps.checkpoint 'Deploy'
                    pipeline.steps.node(JAVA_NODE_LABEL) {  
                        
                        IDeploymentStrategy deploymentStrategy =
                                    new DeploymentPlanStrategyMatrix(artifactory, properties).
                                        selectDeploymentPlanStrategy(versionType, configurationItemType)   
                    
                        if (deploymentStrategy) {
                            def auth = 'CDD'
                            if (pipeline.env.CDD_BASE_URL.contains("stg")) {
                                auth = auth + '_STG'
                            }

                            def cddCredentials = pipeline.getCredentialsFromId(auth)
                            pipeline.env.CDD_TOKEN = cddCredentials["Password"]   
                                                     
                            if (deploymentStrategy.getEnvironmentType() == EnvironmentNone) {
                                if(!envTarget.isEnvIT()){
                                    pipeline.steps.echo("No deployment required")
                                }
                                else{                               
                                    pipeline.steps.error("IT deployments are no longer possible")
                                }
                            } else {          
                                // Oddity: Stage is required to display that there was no plan to deploy                      
                                deploymentStrategy.deploy(maven, pipeline, scmDTO)                      
                            }
                        } else {
                            // Reporting an error as the attempted flow is not handled
                            pipeline.steps.error("No deployment strategy defined for this CI type and SCM branch")
                        }
                    }
              }                        
            }           
            pipeline.currentBuild.result = "SUCCESS"
        } catch (Exception e){
            pipeline.steps.echo ("ERROR : "+e.message)
            pipeline.currentBuild.result = "FAILURE"
        } finally {
                pipeline.steps.stage('Notify') {
                    def mails = ["${properties[AxaProperties.DEV_CHANNEL]}",
                                 "${properties[AxaProperties.OPS_CHANNEL]}"].join(" ")
                    // To be improved
                    if (!mails.equals("null null")) {
                        String[] mailList = mails.split("\\s+")
                        pipeline.feedbacks(mailList, pipeline.currentBuild.result, scmDTO.getChangeDescription(), pom)
                    } else {
                        pipeline.steps.echo("WARNING: No e-mail address available")
                    }
                }
        }
    }
}
